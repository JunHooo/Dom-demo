{"version":3,"sources":["dom.js"],"names":["window","dom","create","string","div","document","createElement","innerHTML","trim","content","firstChild","after","node","node2","parentNode","insertBefore","nextSibling","before","append","parent","child","appendChild","wrap","remove","removeChild","empty","attr","key","value","arguments","length","setAttribute","getAttribute","console","log","text","innerText","textContent","html","style","class","add","name","classList","has","i","c","on","EvenName","fn","addEventListener","off","removeEventListener","find","selector","scope","querySelectorAll","children","siblings","s","list","n","push","next","x","nodeType","previous","previousSibling","each","nodeList","call","index"],"mappings":"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","file":"dom.1d0b6d56.js","sourceRoot":"..\\src","sourcesContent":["window.dom = {\r\n    create(string) {\r\n        let div = document.createElement('template');\r\n        //  div.innerHTML = string\r\n        div.innerHTML = string.trim();//去掉string里面的空格\r\n        return div.content.firstChild;\r\n    },\r\n    after(node, node2) {\r\n        node.parentNode.insertBefore(node2, node.nextSibling)\r\n        //node.insertBefore(newNode, referenceNode)\r\n        //newNode 用于插入的节点;referenceNode newNode 将要插在这个节点之前\r\n    },\r\n    before(node2, node) {\r\n        node.parentNode.insertBefore(node2, node)\r\n    },\r\n    append(parent, child) {\r\n        parent.appendChild(child)\r\n    },\r\n    wrap(child, parent) {\r\n        dom.before(parent, child);//个人理解这一步的作用在于将创建的parent放到页面中,并指定了放置的位置\r\n        parent.appendChild(child);//appendChild会自动将插入的元素移出原来的位置\r\n    },\r\n    remove(node) {\r\n        // node.remove()\r\n        node.parentNode.removeChild(node)\r\n    },\r\n    empty(node) {\r\n        // for (let i = 0; i < node.children.length; i++) {\r\n        //     node.children[i].remove()\r\n        // } \r\n        //这个方法不对，是因为node.children.length是不断变化的\r\n        while (node.firstChild) {\r\n            node.firstChild.remove()\r\n        }\r\n        //当节点的第一个子元素存在时，移除第一个子元素\r\n    },\r\n    attr(node, key, value) {//arguments.length表明参数个数\r\n        if (arguments.length === 3) {\r\n            node.setAttribute(key, value)\r\n        } else if (arguments.length === 2) {\r\n            node.getAttribute(key)\r\n            console.log(node.getAttribute(key))\r\n        }\r\n\r\n    },\r\n    text(node, string) { //注意如果改变的节点里面还有子节点，那么这些节点会因为被新的文本内容取代而消失\r\n        if ('innerText' in node) {\r\n            if (arguments.length === 2) {\r\n                node.innerText = string\r\n            } else if (arguments.length === 1) {\r\n                console.log(node.innerText)\r\n            }\r\n\r\n        } else {\r\n            if (arguments.length === 2) {\r\n                node.textContent = string\r\n            } else if (arguments.length === 1) {\r\n                console.log(node.textContent)\r\n            }\r\n\r\n        }\r\n\r\n    },\r\n    html(node, string) {\r\n        if (arguments.length === 2) {\r\n            node.innerHTML = string\r\n        } else if (arguments.length === 1) {\r\n            console.log(node.innerHTML)\r\n        }\r\n\r\n    },\r\n    style(node, string) {\r\n        //这里可以做很多优化，但是我累了\r\n        node.style = string\r\n    },\r\n    class: {\r\n        add(node, name) {\r\n            node.classList.add(name)\r\n        },\r\n        remove(node, name) {\r\n            //不知道为什么remove之后还有class存在，只是后面没有赋值\r\n            node.classList.remove(name)\r\n        },\r\n        has(node, name) {\r\n            //晕，写了半天有固定的API,这就是读书少的后果\r\n            // return node.classList.contains(name)\r\n            if (node.classList.length !== 0) {\r\n                for (let i = 0; i < node.classList.length; i++) {\r\n                    if (name === node.classList[i]) {\r\n                        console.log(\"存在该属性\")\r\n                    } else if (node.classList.length == c) {\r\n                        console.log(\"不存在该属性\")\r\n                    }\r\n                }\r\n            } else {\r\n                console.log(\"不存在该属性\")\r\n            }\r\n        },\r\n\r\n\r\n    },\r\n    on(node, EvenName, fn) {\r\n        node.addEventListener(EvenName, fn)\r\n    },\r\n    off(node, EvenName, fn) {\r\n        node.removeEventListener(EvenName, fn)\r\n    },\r\n    find(selector, scope) {\r\n        console.log((scope || document).querySelectorAll(selector))\r\n    },\r\n    parent(node) {\r\n        return node.parentNode\r\n    },\r\n    children(node) {\r\n        return node.children\r\n    },\r\n    siblings(node) {\r\n        //为什么老师的方法如此简洁\r\n        // siblings(node){\r\n        //     return Array.from(node.parentNode.children)\r\n        //     .filter(n=>n!==node)\r\n        //   },\r\n        let s = node.parentNode.children\r\n        let list = [];\r\n        let n = 0;\r\n        for (let i = 0; i < s.length; i++) {\r\n            if (node !== s[i]) {\r\n                list.push(s[i])\r\n                console.log(list[n]);\r\n                n++;\r\n            }\r\n        }\r\n\r\n    },\r\n    next(node) {\r\n        let x = node.nextSibling\r\n        while (x && x.nodeType === 3) {\r\n            x = x.nextSibling\r\n        }\r\n        return x\r\n        //头脑过于简单才写出下面的代码\r\n        // node.nextSibling\r\n    },\r\n    previous(node) {\r\n        let x = node.previousSibling\r\n        while (x && x.nodeType === 3) {\r\n            x = x.previousSibling\r\n        }\r\n        return x\r\n        //同上\r\n        //node.previousSibling\r\n    },\r\n    each(nodeList, fn) {\r\n        for (let i = 0; i < nodeList.length; i++) {\r\n            fn.call(null, nodeList[i])\r\n        }\r\n    },\r\n    index(node) {\r\n        let list = dom.children(node.parentNode)\r\n        for (let i = 0; i < list.length; i++) {\r\n            if (list[i] === node) {\r\n                break\r\n            }\r\n        }\r\n        return i\r\n    }\r\n}\r\n\r\n\r\n"]}